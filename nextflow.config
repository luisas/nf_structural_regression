params {

  // Input

  dataset_dir="/users/cn/lsantus/"
  dataset = "homfam"
  //seqs = "" // "${params.dataset_dir}/data/structural_regression/${params.dataset}/combinedSeqs/{$params.testfam}*.fa"
  //refs = "" //"${params.dataset_dir}/data/structural_regression/${params.dataset}/refs/{$params.testfam}*.ref"

  // Output
  outdir = "$baseDir/results/${params.dataset}"

  // Modes

  dynamic_align=false
  regressive_align=false
  progressive_align=false
  structural_regressive_align=false
  foldseek_align=false


  // Structure prediction

  predict = true
  n_af2 = 50 // how many seqs are predicted together

  // Regressive + Dynamic
  buckets = "50"
  align_methods = "FAMSA"
  tree_methods = "FAMSA-medoid"

  // Dynamic
  dynamicX = "100000000"
  dynamicMasterAln="tcoffee_msa"
  dynamicSlaveAln="famsa_msa"

  // DB paths

  af2_db_path = "${params.dataset_dir}/data/structural_regression/af2_structures"
  //MMSEQS
  target_db = "UniProtKB"
  dbdir = "${params.dataset_dir}/data/db/"
  //min_id_mmseqs = 0.6
  //min_cov_mmseqs = 0.7
  //Blast
  blast_database = "${params.dataset_dir}/data/db/blast/2022-10-26/pdb_seqres.txt*"


  // Evaluation
  evaluate = true
  evaluate_extended = false // compute more comprehensive metrics, like TCS
  tcs = true
}


profiles {
    local{
      includeConfig 'conf/base.config'
      includeConfig "conf/af2.config"
      includeConfig "conf/local.config"
    }
    crg{
      includeConfig 'conf/crg.config'
    }
    crg_test{
      includeConfig 'conf/base.config'
      includeConfig 'conf/crg.config'
      includeConfig "conf/af2.config"
      includeConfig "conf/test_params.config"
    }
    saturation{
      includeConfig 'conf/base.config'
      includeConfig 'conf/crg.config'
      includeConfig "conf/af2.config"
      includeConfig "conf/test_saturation.config"
    }
    refs{
      includeConfig 'conf/base.config'
      includeConfig "conf/af2.config"
      includeConfig 'conf/crg.config'
      includeConfig "conf/test_references.config"
    }
    refs_experimental{
      includeConfig 'conf/base.config'
      includeConfig 'conf/crg.config'
      includeConfig "conf/test_references_expstructures.config"
    }
    buckets{
      includeConfig 'conf/base.config'
      includeConfig 'conf/crg.config'
      includeConfig "conf/af2.config"
      includeConfig "conf/homfam.config"
      includeConfig "conf/test_buckets.config"
    }

    libraries{
      includeConfig 'conf/base.config'
      includeConfig 'conf/crg.config'
      includeConfig "conf/test_libraries.config"
      includeConfig "conf/homfam.config"
    }
    
    compact{
      includeConfig 'conf/base.config'
      includeConfig 'conf/crg.config'
      includeConfig "conf/test_compact.config"
      includeConfig "conf/homfam.config"
    }
    reg{
      includeConfig 'conf/base.config'
      includeConfig 'conf/crg.config'
      includeConfig "conf/test_reg.config"
      includeConfig "conf/homfam.config"
    }
    compact_local{
      includeConfig 'conf/base.config'
      includeConfig 'conf/local.config'
      includeConfig "conf/test_compact.config"
      includeConfig "conf/homfam.config"
    }

    msafold{
      includeConfig 'conf/base.config'
      includeConfig 'conf/crg.config'
      includeConfig "conf/test_msafold.config"
      includeConfig "conf/homfam.config"
    }

    fsreg{
      includeConfig 'conf/base.config'
      includeConfig 'conf/crg.config'
      includeConfig "conf/test_fs_regressive.config"
      includeConfig "conf/homfam.config"
    }
    str{
      includeConfig 'conf/base.config'
      includeConfig 'conf/crg.config'
      includeConfig "conf/test_str.config"
      includeConfig "conf/homfam.config"
    }
    eval{
      includeConfig 'conf/base.config'
      includeConfig 'conf/crg.config'
      includeConfig "conf/eval.config"
    }
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }

}
